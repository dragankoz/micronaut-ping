service: micronaut-ping-api
frameworkVersion: '3'

custom:
  deploy-time: ${file(./scripts/gettime.js)}
  runtime: ${file(./scripts/runtime.js)}
  artifact: ${file(./scripts/artifact.js)}
  version: ${file(./scripts/version.js)}
  stage:
    sandbox:
      endpoint: REGIONAL
      policy: ${file(resource_policy/internal_network.yaml)}
      waf: Default_WAF
  associateWaf:
    name: ${self:custom.stage.${self:provider.stage}.waf}
    version: V2

plugins:
  - serverless-better-credentials
  - serverless-iam-roles-per-function
  - serverless-openapi-integration-helper

package:
  artifact:  ${self:custom.artifact}

provider:
  name: aws
  runtime: ${self:custom.runtime}
  stage: ${opt:stage, 'sandbox'}
  region: ap-southeast-2
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 10 # optional, in seconds, default is 6
  versionFunctions: true # optional, default is true
  tracing:
    # Can only be true if API Gateway is inside a stack.
    apiGateway: false
    # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
    lambda: true
  logs:
    restApi:
      fullExecutionData: false
  environment:
    JAVA_TOOL_OPTIONS: -Xverify:none -XX:+TieredCompilation -XX:TieredStopAtLevel=1
  stackTags:
    GitProjectCode: ${env:CI_PROJECT_PATH, "local"}
    Version: ${self:custom.version}
    UpdateTimestamp: ${env:TIMESTAMP, self:custom.deploy-time}
  iam:
    role:
      statements:
        # Allow lambda invoke
        - Effect: Allow
          Action:
            - 'lambda:InvokeFunction'
          Resource: '*'

openApiIntegration:
  inputFile: ./target/classes/META-INF/swagger/openapi.yml
  package: true
  cors: false
  autoMock: true
  mapping:
    - stage: [sandbox]
      path: integrations

functions:
  HelloFunction:
    handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
  PingFunction:
    handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
  SecretFunction:
    handler: io.micronaut.function.aws.proxy.MicronautLambdaHandler
    iamRoleStatements:
      - Effect: Allow
        Action: secretsmanager:GetSecretValue
        Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:TestSecrets*

resources:
  Description: This is a serverless implementation to allow testing of the AWS platform
  Outputs:
    GatewayUrl: # This is the key that will be used in the generated outputs file
      Description: This is a helper for functional tests
      Value: !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.'
          - ${opt:region, self:provider.region}
          - '.amazonaws.com/'
          - ${opt:stage, self:provider.stage}

  Resources:
    IamRoleLambdaExecution: # has to be this exact name, https://serverless.com/framework/docs/providers/aws/guide/resources/
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: # OVERWRITE assume role policy, rest is populated by serverless
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action: sts:AssumeRole

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        ApiKeySourceType: HEADER
        Body: ~ #autogenerated by serverless-openapi-integration-helper plugin
        Mode: overwrite
        Description: Micronaut Ping API (${self:provider.stage})
        FailOnWarnings: true
        Name: ${self:service}-${self:provider.stage}
        DisableExecuteApiEndpoint: false # Disable default https://{api_id}.execute-api.{region}.amazonaws.com
        MinimumCompressionSize: 1024
        EndpointConfiguration:
          Types:
            - ${self:custom.stage.${self:provider.stage}.endpoint, 'PRIVATE'}
        Policy:
          ${self:custom.stage.${self:provider.stage}.policy, ''}
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        Description: ${opt:stage, self:provider.stage}
        RestApiId: !Ref ApiGatewayRestApi
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        StageName: ${opt:stage, self:provider.stage}
        Description: ${opt:stage, self:provider.stage} Stage
        RestApiId: !Ref ApiGatewayRestApi
        DeploymentId: !Ref ApiGatewayDeployment
